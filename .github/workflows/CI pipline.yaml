# name of our workflow
name: Django CI/CD Workflow

# triggers for our workflow
on:
  # opening a pull request to master and develop branch will be a trigger
  pull_request:
    branches:
      - develop
      - main
  # any code pushed to master and develop branch will also be a trigger
  push:
    branches:
      - main
      - develop

# three job definition
jobs:
  health-check-job: # health check job for testing and code formatting check
    runs-on: ubuntu-latest # os for running the job
    
    steps:
      - name: Checkout code # checking out the code at current commit that triggers the workflow
        uses: actions/checkout@v2

      - name: Cache dependency # caching dependency will make our build faster.
        uses: actions/cache@v2 # for more info check pip section documentation at https://github.com/actions/cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup python environment # setting python environment to 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.11' # if you want multiple python versions run just use matrix strategy in job config. See the documentation of GitHub Actions
      
      - name: Check Python version # checking the python version to see if 3.x is installed.
        run: python --version

      - name: Install requirements # install application requirements
        run: pip install -r requirements.txt || { echo 'install requirements failed'; exit 1; }

      - name: Check Code Quality with flake8 # Run flake8 to check code quality
        run: flake8 . || { echo 'flake8 failed'; exit 1; }

      - name: Run Migrations # run migrations to create tables in the sidecar db container
        run: python manage.py migrate || { echo 'Migrations failed'; exit 1; }
        
      - name: Run Test # running tests
        run: python manage.py test || { echo 'Tests failed'; exit 1; }
      
      - name: Run Django Development Server
        run: |
          python manage.py runserver 0.0.0.0:8000 &
